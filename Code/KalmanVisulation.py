import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from copy import deepcopy
from matplotlib.patches import Ellipse

if __name__ == "__main__":
    filePrefix = './Npy/Adaptive2ndOrder/121119/'
    PXHhat = np.load(filePrefix + 'PXHhat.npy')
    PYHhat = np.load(filePrefix + 'PYHhat.npy')
    UXHhat = np.load(filePrefix + 'UXHhat.npy')
    UYHhat = np.load(filePrefix + 'UYHhat.npy')
    PosPX = np.load(filePrefix + 'PosPX.npy')
    PosPY = np.load(filePrefix + 'PosPY.npy')
    PriPX = np.load(filePrefix + 'PriPX.npy')
    PriPY = np.load(filePrefix + 'PriPY.npy')
    Kx = np.load(filePrefix + 'Kx.npy')
    Ky = np.load(filePrefix + 'Ky.npy')
    DelDX = np.load(filePrefix + 'DelDX.npy')
    DelDY = np.load(filePrefix + 'DelDY.npy')
    Zx = np.load(filePrefix + 'Zx.npy')
    Zy = np.load(filePrefix + 'Zy.npy')
    
    
#    # Plotting Kalman gain for X axis
#    figure = plt.figure()
#    ax1 = plt.gca()
#    t = np.arange(Kx.shape[0])
#    plt.plot(t, Kx[:,0], 'b-', label = 'KX00')
#    plt.plot(t, Kx[:,1], 'r-', label = 'KX01')
#    plt.plot(t, Kx[:,2], 'g-', label = 'KX10')
#    plt.plot(t, Kx[:,3], 'c-', label = 'KX11')
#    plt.legend(loc = 'upper right')
#    
#    # Plotting Kalman gain for Y axis
#    figure2 = plt.figure()
#    ax2 = plt.gca()
#    t = np.arange(Ky.shape[0])
#    plt.plot(t, Ky[:,0], 'b-', label = 'KY00')
#    plt.plot(t, Ky[:,1], 'r-', label = 'KY01')
#    plt.plot(t, Ky[:,2], 'g-', label = 'KY10')
#    plt.plot(t, Ky[:,3], 'c-', label = 'KY11')
#    plt.legend(loc = 'upper right')
    
#    # Plotting predicted convariance P for X axis
#    figure3 = plt.figure()
#    ax3 = plt.gca()
#    t = np.arange(PosPX.shape[0])
#    plt.plot(t, PosPX[:,0], 'b-', label = 'PX_p 00')
#    plt.plot(t, PosPX[:,1], 'r-', label = 'PX_p 01')
#    plt.plot(t, PosPX[:,2], 'g-', label = 'PX_p 10')
#    plt.plot(t, PosPX[:,3], 'c-', label = 'PX_p 11')
#    plt.legend(loc = 'upper right')
    
#    # Plotting predicted convariance P for Y axis
#    figure4 = plt.figure()
#    ax4 = plt.gca()
#    t = np.arange(PosPY.shape[0])
#    plt.plot(t, PosPY[:,0], 'b-', label = 'PY_p 00')
#    plt.plot(t, PosPY[:,1], 'r-', label = 'PY_p 01')
#    plt.plot(t, PosPY[:,2], 'g-', label = 'PY_p 10')
#    plt.plot(t, PosPY[:,3], 'c-', label = 'PY_p 11')
#    plt.legend(loc = 'upper right')
    
#    # Showing the predicted Xhat and predicted covariance
#    figure5 = plt.figure()
#    plt.subplot(1,3,1)
#    ax5 = plt.gca()
#    plt.subplot(1,3,2)
#    ax6 = plt.gca()
#    plt.subplot(1,3,3)
#    ax7 = plt.gca()
#    
#    def animate(i):
#        ax5.plot(Zx[i,0], Zy[i,0], 'bo')
#        ax5.set_xlim([0, 192])
#        ax5.set_ylim([256,0])
#        ax5.set_aspect('equal')
#        e = Ellipse((PXHhat[i,0], PYHhat[i,0]), 3*PosPX[i,0], 3*PosPY[i,0], edgecolor = 'red', facecolor = 'none')
#        ax6.add_patch(e)
#        ax6.plot()
#        ax6.set_xlim([0,192])
#        ax6.set_ylim([256,0])
#        ax6.set_aspect('equal')
#        ax7.plot(PXHhat[i,0], PYHhat[i,0], 'bo')
#        ax7.set_xlim([0,192])
#        ax7.set_ylim([256,0])
#        ax7.set_aspect('equal')
#        
#    def init():
#        ax5.plot(Zx[0,0], Zy[0,0], 'bo')
#        ax5.set_xlim([0, 192])
#        ax5.set_ylim([256,0])
#        ax5.set_aspect('equal')
#        e = Ellipse((PXHhat[0,0], PYHhat[0,0]), 3*PosPX[0,0], 3*PosPY[0,0], edgecolor = 'red', facecolor = 'none')
#        ax6.add_patch(e)
#        ax6.plot()
#        ax6.set_xlim([0,192])
#        ax6.set_ylim([256,0])
#        ax6.set_aspect('equal')
#        ax7.plot(PXHhat[0,0], PYHhat[0,0], 'bo')
#        ax7.set_xlim([0,192])
#        ax7.set_ylim([256,0])
#        ax7.set_aspect('equal')
#        
#    ani = animation.FuncAnimation(fig = figure5,
#                                  func = animate,
#                                  frames = PXHhat.shape[0],
#                                  init_func = init,
#                                  interval = 200,
#                                  blit = False,
#                                  repeat = True,
#                                  repeat_delay = 10)    
#    videoWriter = animation.FFMpegFileWriter()
#    ani.save('PredictTrace_Full.gif', writer='pillow')
    
#    figure6 = plt.figure()
#    ax8 = plt.gca()
#    V = np.array([PXHhat[3,1], PYHhat[3,1]])
#    
#    plt.plot(PXHhat[3,0], PYHhat[3,0],'bo')
#    plt.plot(PXHhat[3,0] + PXHhat[3,1], PYHhat[3,0] + PYHhat[3,1],'ro')
#    plt.quiver(PXHhat[3,0], PYHhat[3,0], PXHhat[3,1] , PYHhat[3,1], scale = 1,units = 'xy', color = 'g')
#    plt.show() 
#    ax8.set_aspect('equal')
    
#    # Plotting the predicted velocity and acceleration at k=3
#    figure6 = plt.figure()
#    ax8 = plt.gca()
#    vec = np.array([UXHhat[2,1], UYHhat[2,1]])
#    acc = np.array([DelDX[0, 1], DelDY[0,1]])
#    e = Ellipse((PXHhat[0,0], PYHhat[0,0]), 3*PosPX[0,0], 3*PosPY[0,0], edgecolor = 'yellow', facecolor = 'none')
#    ax8.add_patch(e)
#    ax8.plot()
#    plt.plot(PXHhat[0,0], PYHhat[0,0], 'yo', label = 'k-3')
#    e = Ellipse((PXHhat[1,0], PYHhat[1,0]), 3*PosPX[1,0], 3*PosPY[1,0], edgecolor = 'red', facecolor = 'none')
#    ax8.add_patch(e)
#    ax8.plot()
#    plt.plot(PXHhat[1,0], PYHhat[1,0], 'ro', label = 'k-2')
#    e = Ellipse((PXHhat[2,0], PYHhat[2,0]), 3*PosPX[2,0], 3*PosPY[2,0], edgecolor = 'blue', facecolor = 'none')
#    ax8.add_patch(e)
#    ax8.plot()
#    plt.plot(PXHhat[2,0], PYHhat[2,0], 'bo', label = 'k-1')
#    plt.quiver(PXHhat[2,0], PYHhat[2,0], vec[0], vec[1], scale = 1, units = 'xy', color = 'g', label = 'Velocity')
#    plt.quiver(PXHhat[2,0], PYHhat[2,0], acc[0], acc[1], scale = 1, units = 'xy', color = 'r', label = 'Acceleration')
#    plt.plot(PXHhat[3,0], PYHhat[3,0], 'cx', label = 'k|k-1')
#    e = Ellipse((PXHhat[3,0], PYHhat[3,0]), 3*PosPX[3,0], 3*PosPY[3,0], edgecolor = 'c', facecolor = 'none')
#    ax8.add_patch(e)
#    ax8.plot()
#    plt.plot(PXHhat[3,0]+acc[0], PYHhat[3,0]+acc[1])
#    plt.show()
#    ax8.set_aspect('equal')
#    plt.legend(loc = 'upper right')
#    plt.title('Predicted step')
    
#    # Plottint the updated position and velocity at k=3
#    figure7 = plt.figure()
#    ax9 = plt.gca()
#    vec = np.array([UXHhat[2,1], UYHhat[2,1]])
#    acc = np.array([DelDX[0, 1], DelDY[0,1]])
#    e = Ellipse((PXHhat[0,0], PYHhat[0,0]), 3*PosPX[0,0], 3*PosPY[0,0], edgecolor = 'yellow', facecolor = 'none')
#    ax9.add_patch(e)
#    ax9.plot()
#    plt.plot(PXHhat[0,0], PYHhat[0,0], 'yo', label = 'X[k-3]')
#    e = Ellipse((PXHhat[1,0], PYHhat[1,0]), 3*PosPX[1,0], 3*PosPY[1,0], edgecolor = 'red', facecolor = 'none')
#    ax9.add_patch(e)
#    ax9.plot()
#    plt.plot(PXHhat[1,0], PYHhat[1,0], 'ro', label = 'X[k-2]')
#    e = Ellipse((PXHhat[2,0], PYHhat[2,0]), 3*PosPX[2,0], 3*PosPY[2,0], edgecolor = 'blue', facecolor = 'none')
#    ax9.add_patch(e)
#    ax9.plot()
#    plt.plot(PXHhat[2,0], PYHhat[2,0], 'bo', label = 'X[k-1]')
#    plt.quiver(PXHhat[2,0], PYHhat[2,0], vec[0], vec[1], scale = 1, units = 'xy', color = 'g', label = 'Velocity')
#    plt.quiver(PXHhat[2,0], PYHhat[2,0], acc[0], acc[1], scale = 1, units = 'xy', color = 'r', label = 'Acceleration')
#    plt.plot(PXHhat[3,0], PYHhat[3,0], 'cx', label = 'X[k|k-1]')
#    e = Ellipse((PXHhat[3,0], PYHhat[3,0]), 3*PriPX[3,0], 3*PriPY[3,0], edgecolor = 'c', facecolor = 'none', linestyle = '--')
#    ax9.add_patch(e)
#    ax9.plot()
#    plt.plot(Zx[3,0], Zy[3,0], 'cs', label = 'Measurement position Z[k]')
#    plt.quiver(Zx[3,0], Zy[3,0], Zx[3,1], Zy[3,1], scale = 1, units = 'xy', color = 'k', label = 'Measurement velocity at k')
#    plt.plot(UXHhat[3,0], UYHhat[3,0], 'cd', label = 'X[k|k]')
#    e = Ellipse((UXHhat[3,0], UYHhat[3,0]), 3*PosPX[3,0], 3*PosPY[3,0], edgecolor = 'c', facecolor = 'none', linestyle = '-.')
#    ax9.add_patch(e)
#    ax9.plot()
#    plt.quiver(UXHhat[3,0], UYHhat[3,0], UXHhat[3,1], UYHhat[3,1], scale = 1, units = 'xy', color = 'm', label = 'Updated velocity at k')
#    plt.show()
#    ax9.set_aspect('equal')
#    plt.legend(loc = 'upper right')
#    plt.title('Update step')
    
#    # Plotting the predicted velocity and acceleration at k=55
#    k = 55
#    figure8 = plt.figure()
#    ax10 = plt.gca()
#    vec = np.array([UXHhat[k-1,1], UYHhat[k-1,1]])
#    acc = np.array([DelDX[k-3, 1], DelDY[k-3,1]])
#    e = Ellipse((PXHhat[k-3,0], PYHhat[k-3,0]), 3*PosPX[k-3,0], 3*PosPY[k-3,0], edgecolor = 'yellow', facecolor = 'none')
#    ax10.add_patch(e)
#    ax10.plot()
#    plt.plot(PXHhat[k-3,0], PYHhat[k-3,0], 'yo', label = 'X[k-3]')
#    e = Ellipse((PXHhat[k-2,0], PYHhat[k-2,0]), 3*PosPX[k-2,0], 3*PosPY[k-2,0], edgecolor = 'red', facecolor = 'none')
#    ax10.add_patch(e)
#    ax10.plot()
#    plt.plot(PXHhat[k-2,0], PYHhat[k-2,0], 'ro', label = 'X[k-2]')
#    e = Ellipse((PXHhat[k-1,0], PYHhat[k-1,0]), 3*PosPX[k-1,0], 3*PosPY[k-1,0], edgecolor = 'blue', facecolor = 'none')
#    ax10.add_patch(e)
#    ax10.plot()
#    plt.plot(PXHhat[k-1,0], PYHhat[k-1,0], 'bo', label = 'X[k-1]')
#    plt.quiver(PXHhat[k-1,0], PYHhat[k-1,0], vec[0], vec[1], scale = 1, units = 'xy', color = 'g', label = 'Velocity')
#    plt.quiver(PXHhat[k-1,0], PYHhat[k-1,0], acc[0], acc[1], scale = 1, units = 'xy', color = 'r', label = 'Acceleration')
#    plt.plot(PXHhat[k,0], PYHhat[k,0], 'cx', label = 'X[k|k-1]')
#    e = Ellipse((PXHhat[k,0], PYHhat[k,0]), 3*PosPX[k,0], 3*PosPY[k,0], edgecolor = 'c', facecolor = 'none', linestyle = '--')
#    ax10.add_patch(e)
#    ax10.plot()
#    plt.plot(PXHhat[k,0]+acc[0], PYHhat[k,0]+acc[1])
#    plt.show()
#    ax10.set_aspect('equal')
#    plt.legend(loc = 'upper left')
#    plt.xlim([100, 120])
#    plt.ylim([45,90])
#    plt.title('Predicted step')    
    
#    # Plottint the updated position and velocity at k=55
    k = 55
    figure9 = plt.figure()
    ax11 = plt.gca()
    vec = np.array([UXHhat[k-1,1], UYHhat[k-1,1]])
    acc = np.array([DelDX[k-3, 1], DelDY[k-3,1]])
    e = Ellipse((PXHhat[k-3,0], PYHhat[k-3,0]), 3*PosPX[k-3,0], 3*PosPY[k-3,0], edgecolor = 'yellow', facecolor = 'none')
    ax11.add_patch(e)
    ax11.plot()
    plt.plot(PXHhat[k-3,0], PYHhat[k-3,0], 'yo', label = 'X[k-3]')
    e = Ellipse((PXHhat[k-2,0], PYHhat[k-2,0]), 3*PosPX[k-2,0], 3*PosPY[k-2,0], edgecolor = 'red', facecolor = 'none')
    ax11.add_patch(e)
    ax11.plot()
    plt.plot(PXHhat[k-2,0], PYHhat[k-2,0], 'ro', label = 'X[k-2]')
    e = Ellipse((PXHhat[k-1,0], PYHhat[k-1,0]), 3*PosPX[k-1,0], 3*PosPY[k-1,0], edgecolor = 'blue', facecolor = 'none')
    ax11.add_patch(e)
    ax11.plot()
    plt.plot(PXHhat[k-1,0], PYHhat[k-1,0], 'bo', label = 'X[k-1]')
    plt.quiver(PXHhat[k-1,0], PYHhat[k-1,0], vec[0], vec[1], scale = 1, units = 'xy', color = 'g', label = 'Velocity')
    plt.quiver(PXHhat[k-1,0], PYHhat[k-1,0], acc[0], acc[1], scale = 1, units = 'xy', color = 'r', label = 'Acceleration')
    plt.plot(PXHhat[k,0], PYHhat[k,0], 'cx', label = 'X[k|k-1]')
    e = Ellipse((PXHhat[k,0], PYHhat[k,0]), 3*PosPX[k,0], 3*PosPY[k,0], edgecolor = 'c', facecolor = 'none', linestyle = '--')
    ax11.add_patch(e)
    ax11.plot()
    plt.plot(PXHhat[k,0]+acc[0], PYHhat[k,0]+acc[1])
    plt.plot(Zx[k,0], Zy[k,0], 'cs', label = 'Measurement position Z[k]')
    plt.quiver(Zx[k,0], Zy[k,0], Zx[k,1], Zy[k,1], scale = 1, units = 'xy', color = 'k', label = 'Measurement velocity at k')
    plt.plot(UXHhat[k,0], UYHhat[k,0], 'cd', label = 'X[k|k]')
    e = Ellipse((UXHhat[k,0], UYHhat[k,0]), 3*PosPX[k,0], 3*PosPY[k,0], edgecolor = 'c', facecolor = 'none', linestyle = '-.')
    ax11.add_patch(e)
    ax11.plot()
    plt.quiver(UXHhat[k,0], UYHhat[k,0], UXHhat[k,1], UYHhat[k,1], scale = 1, units = 'xy', color = 'm', label = 'Updated velocity at k')
    plt.plot(UXHhat[k,0]+UXHhat[k,1], UYHhat[k,0]+UYHhat[k,1])
    ax11.set_aspect('equal')
    plt.legend(loc = 'upper left')
    plt.xlim([100, 120])
    plt.ylim([45,90])
    plt.title('Update step')
    
    
    # Showing the predicted Xhat and predicted covariance
#    figure10 = plt.figure()
#    ax12 = plt.gca()
#
#    
#    def animate(k):
#        ax12.cla()
#        ax12.invert_yaxis()
#        ax12.plot(UXHhat[0:k,0], UYHhat[0:k,0], c = (0.1,0.3,0.4))
#        vec = np.array([UXHhat[k-1,1], UYHhat[k-1,1]])
#        acc = np.array([DelDX[k-3, 1], DelDY[k-3,1]])
#        e = Ellipse((UXHhat[k-3,0], UYHhat[k-3,0]), 3*PriPX[k-3,0], 3*PriPY[k-3,0], edgecolor = 'yellow', facecolor = 'none')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.plot(UXHhat[k-3,0], UYHhat[k-3,0], 'yo', label = 'X[k-3]')
#        e = Ellipse((UXHhat[k-2,0], UYHhat[k-2,0]), 3*PriPX[k-2,0], 3*PriPY[k-2,0], edgecolor = 'red', facecolor = 'none')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.plot(UXHhat[k-2,0], UYHhat[k-2,0], 'ro', label = 'X[k-2]')
#        e = Ellipse((UXHhat[k-1,0], UYHhat[k-1,0]), 3*PriPX[k-1,0], 3*PriPY[k-1,0], edgecolor = 'blue', facecolor = 'none')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.plot(UXHhat[k-1,0], UYHhat[k-1,0], 'bo', label = 'X[k-1]')
#        plt.quiver(UXHhat[k-1,0], UYHhat[k-1,0], vec[0], -vec[1], scale = 1, units = 'xy', color = 'g', label = 'Velocity')
#        plt.plot(UXHhat[k-1,0]+vec[0], UYHhat[k-1,0]+vec[1])
#        plt.quiver(UXHhat[k-1,0], UYHhat[k-1,0], acc[0], -acc[1], scale = 1, units = 'xy', color = 'r', label = 'Acceleration')
#        plt.plot(UXHhat[k-1,0]+acc[0], UYHhat[k-1,0]+acc[1])
#        plt.plot(PXHhat[k,0], PYHhat[k,0], 'cx', label = 'X[k|k-1]')
#        e = Ellipse((PXHhat[k,0], PYHhat[k,0]), 3*PriPX[k,0], 3*PriPY[k,0], edgecolor = 'c', facecolor = 'none', linestyle = '--')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.plot(PXHhat[k,0]+acc[0], PYHhat[k,0]+acc[1])
#        plt.plot(Zx[k,0], Zy[k,0], 'cs', label = 'Measurement position Z[k]')
#        plt.quiver(Zx[k,0], Zy[k,0], Zx[k,1], -Zy[k,1], scale = 1, units = 'xy', color = 'k', label = 'Measurement velocity at k')
#        plt.plot(Zx[k,0] + Zx[k,1], Zy[k,0] + Zy[k,1])
#        plt.plot(UXHhat[k,0], UYHhat[k,0], 'cd', label = 'X[k|k]')
#        e = Ellipse((UXHhat[k,0], UYHhat[k,0]), 3*PosPX[k,0], 3*PosPY[k,0], edgecolor = 'c', facecolor = 'none', linestyle = '-.')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.quiver(UXHhat[k,0], UYHhat[k,0], UXHhat[k,1], -UYHhat[k,1], scale = 1, units = 'xy', color = 'm', label = 'Updated velocity at k')
#        plt.plot(UXHhat[k,0]+UXHhat[k,1], UYHhat[k,0]+UYHhat[k,1])
#        ax12.set_aspect('equal')
#        plt.legend(loc = 'upper left')
##        ax12.set_xlim([0, 192])
##        ax12.set_ylim([256, 0])
#
#        
#    def init():
#        k=3
#        ax12.invert_yaxis()
#        vec = np.array([UXHhat[k-1,1], UYHhat[k-1,1]])
#        acc = np.array([DelDX[k-3, 1], DelDY[k-3,1]])
#        e = Ellipse((UXHhat[k-3,0], UYHhat[k-3,0]), 3*PriPX[k-3,0], 3*PriPY[k-3,0], edgecolor = 'yellow', facecolor = 'none')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.plot(UXHhat[k-3,0], UYHhat[k-3,0], 'yo', label = 'X[k-3]')
#        e = Ellipse((UXHhat[k-2,0], UYHhat[k-2,0]), 3*PriPX[k-2,0], 3*PriPY[k-2,0], edgecolor = 'red', facecolor = 'none')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.plot(UXHhat[k-2,0], UYHhat[k-2,0], 'ro', label = 'X[k-2]')
#        e = Ellipse((UXHhat[k-1,0], UYHhat[k-1,0]), 3*PriPX[k-1,0], 3*PriPY[k-1,0], edgecolor = 'blue', facecolor = 'none')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.plot(UXHhat[k-1,0], UYHhat[k-1,0], 'bo', label = 'X[k-1]')
#        plt.quiver(UXHhat[k-1,0], UYHhat[k-1,0], vec[0], -vec[1], scale = 1, units = 'xy', color = 'g', label = 'Velocity')
#        plt.plot(UXHhat[k-1,0] + vec[0], UYHhat[k-1,0] + vec[1])
#        plt.quiver(UXHhat[k-1,0], UYHhat[k-1,0], acc[0], -acc[1], scale = 1, units = 'xy', color = 'r', label = 'Acceleration')
#        plt.plot(UXHhat[k-1,0] + acc[0], UYHhat[k-1,0] + acc[1])
#        plt.plot(PXHhat[k,0], PYHhat[k,0], 'cx', label = 'X[k|k-1]')
#        e = Ellipse((PXHhat[k,0], PYHhat[k,0]), 3*PriPX[k,0], 3*PriPY[k,0], edgecolor = 'c', facecolor = 'none', linestyle = '--')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.plot(PXHhat[k,0]+acc[0], PYHhat[k,0]+acc[1])
#        plt.plot(Zx[k,0], Zy[k,0], 'cs', label = 'Measurement position Z[k]')
#        plt.quiver(Zx[k,0], Zy[k,0], Zx[k,1], - Zy[k,1], scale = 1, units = 'xy', color = 'k', label = 'Measurement velocity at k')
#        plt.plot(Zx[k,0] + Zx[k,1], Zy[k,0] + Zy[k,1])
#        plt.plot(UXHhat[k,0], UYHhat[k,0], 'cd', label = 'X[k|k]')
#        e = Ellipse((UXHhat[k,0], UYHhat[k,0]), 3*PosPX[k,0], 3*PosPY[k,0], edgecolor = 'c', facecolor = 'none', linestyle = '-.')
#        ax12.add_patch(e)
#        ax12.plot()
#        plt.quiver(UXHhat[k,0], UYHhat[k,0], UXHhat[k,1], -UYHhat[k,1], scale = 1, units = 'xy', color = 'm')
#        plt.plot(UXHhat[k,0]+UXHhat[k,1], UYHhat[k,0]+UYHhat[k,1])
#        ax12.set_aspect('equal')
#        plt.legend(loc = 'upper left')
##        ax12.set_xlim([0, 192])
##        ax12.set_ylim([256, 0])
#        
#        
#    ani = animation.FuncAnimation(fig = figure10,
#                                  func = animate,
#                                  frames = range(3,PXHhat.shape[0]),
#                                  init_func = init,
#                                  interval = 20,
#                                  blit = False,
#                                  repeat = True,
#                                  repeat_delay = 10)
##    plt.show()    
##    videoWriter = animation.FFMpegFileWriter()
#    ani.save('Trace.gif', writer='pillow')

    
    
    